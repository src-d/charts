apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "sourced-ui.fullname" . }}
  labels:
    app: {{ template "sourced-ui.name" . }}
    chart: {{ template "sourced-ui.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: {{ template "sourced-ui.fullname" . }}-initdb
      labels:
        app: {{ template "sourced-ui.name" . }}
        chart: {{ template "sourced-ui.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      restartPolicy: Never
      volumes:
        - name: tmp-pod
          emptyDir: {}
      {{- if .Values.postgres.cloudSQL.enabled }}
        - name: cloudsql-instance-credentials
          secret:
            secretName: {{ required "missing postgres.cloudSQL.serviceAccountSecret" .Values.postgres.cloudSQL.serviceAccountSecret }}
      {{- end }}
      containers:
      {{- if .Values.postgres.cloudSQL.enabled }}
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.11
          command: ["/bin/sh", "-c"]
          # The following is a hack needed as Kubernetes wants the 2 containers to exit to complete the job
          # See https://github.com/kubernetes/kubernetes/issues/25908
          args:
          - |
            /cloud_sql_proxy --dir=/cloudsql -instances={{ required "missing postgres.cloudSQL.instanceConnectionName" .Values.postgres.cloudSQL.instanceConnectionName }}=tcp:5432 -credential_file=/secrets/cloudsql/credentials.json &
            CHILD_PID=$!
            (while true; do if [[ -f "/tmp/pod/main-terminated" ]]; then kill $CHILD_PID; echo "Killed $CHILD_PID as the main container terminated."; fi; sleep 1; done) &
            wait $CHILD_PID
            if [[ -f "/tmp/pod/main-terminated" ]]; then exit 0; echo "Job completed. Exiting..."; fi
          securityContext:
            runAsUser: 2  # non-root user
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: cloudsql-instance-credentials
              mountPath: /secrets/cloudsql
              readOnly: true
            - mountPath: /tmp/pod
              name: tmp-pod
              readOnly: true
        {{- end }}
        - name: sourced-ui-initdb
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              trap "touch /tmp/pod/main-terminated" EXIT
              python /home/superset/bootstrap.py
          env:
            - name: MODE
              value: "{{ default "Community" .Values.app.mode }}"
            - name: SUPERSET_ENV
              value: production
            - name: ADMIN_LOGIN
              value: "{{ default "admin" .Values.admin.login }}"
            - name: ADMIN_FIRST_NAME
              value: "{{ default "admin" .Values.admin.firstName }}"
            - name: ADMIN_LAST_NAME
              value: "{{ default "admin" .Values.admin.lastName }}"
            - name: ADMIN_EMAIL
              value: "{{ default "admin@example.com" .Values.admin.email }}"
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ default "password" .Values.admin.secretKey }}
                  name: "{{ default (include "sourced-ui.admin.hookSecretName" .) .Values.admin.secretName }}"
            - name: POSTGRES_HOST
            {{- if .Values.postgres.cloudSQL.enabled }}
              value: localhost
            {{- else }}
              value: "{{ required "missing postgres.host value" .Values.postgres.host }}"
            {{- end }}
            - name: POSTGRES_PORT
              value: "{{ default "5432" .Values.postgres.port }}"
            - name: POSTGRES_DB
              value: "{{ required "missing postgres.db value" .Values.postgres.db }}"
            - name: POSTGRES_USER
              value: "{{ required "missing postgres.user value" .Values.postgres.user }}"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ default "password" .Values.postgres.secretKey }}
                  name: "{{ default (include "sourced-ui.postgres.hookSecretName" .) .Values.postgres.secretName }}"
            - name: REDIS_HOST
              value: "{{ required "missing redis.host value" .Values.redis.host }}"
            - name: REDIS_PORT
              value: "{{ default "6379" .Values.redis.port }}"
            - name: GITBASE_HOST
              value: "{{ required "missing gitbase.host value" .Values.gitbase.host }}"
            - name: GITBASE_PORT
              value: "{{ default "3306" .Values.gitbase.port }}"
            - name: GITBASE_DB
              value: "{{ required "missing gitbase.db value" .Values.gitbase.db }}"
            {{- if .Values.gitbase.user }}
            - name: GITBASE_USER
              value: "{{ .Values.gitbase.user }}"
            {{- end }}
            {{- if (or .Values.gitbase.secretName .Values.gitbase.password) }}
            - name: GITBASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ default "password" .Values.gitbase.secretKey }}
                  name: "{{ default (include "sourced-ui.gitbase.hookSecretName" .) .Values.gitbase.secretName }}"
            {{- end }}
            - name: BBLFSH_WEB_HOST
              value: "{{ required "missing bblfshWeb.host value" .Values.bblfshWeb.host }}"
            - name: BBLFSH_WEB_PORT
              value: "{{ default "8080" .Values.bblfshWeb.port }}"
          volumeMounts:
            - mountPath: /tmp/pod
              name: tmp-pod
